package lipid;
unit LipidScoreUnit;
import lipid.Annotation;
import adduct.Adduct;
import adduct.AdductList;
import lipid.LipidPriority;
import java.util.concurrent.atomic.AtomicReference;


rule "identify adduct"
when
    $a :/ annotations [$mz : mz, $ion : ionization, $group : groupedSignals]
then
    String finalAdduct = $a.identifyAdduct();
    modify ($a) {setAdduct(finalAdduct)}
    annotations.add($a);
end

query FindMadeAnnotation
    $a : /annotations[ adduct != null]
end

rule "Score 1 for lipid pair with increasing RT and carbon count"
when
    $a1 : /annotations [$rt1 : rtMin, $carbonCount1 : lipid.getCarbonCount(), $doubleBondCount : lipid.getDoubleBondsCount(), $type : lipid.getLipidType()]
    $a2 : /annotations [this!= $a1, lipid.getDoubleBondsCount() == $doubleBondCount, rtMin > $rt1, lipid.getCarbonCount() > $carbonCount1, lipid.getLipidType().equals($type)]
then
    // in this case, the only change is the addition of the score, but the fact does not change so we do not break the principle of refractoriness
    $a1.addScore(1);
    $a2.addScore(1);
    // !! TODO ONLY FOR DEBUGGING
    System.out.println("Rule 1");
    //System.out.println("Scored 1 for annotations: " + $a1 + " and " + $a2);
end

rule "Score 1 for lipid pair with increasing RT and double bonds"
when
    $a1 : /annotations [$rt1 : rtMin, $carbonCount1 : lipid.getCarbonCount(), $doubleBondCount : lipid.getDoubleBondsCount(), $lipid : lipid.getLipidType()]
    $a2 : /annotations [this!= $a1, rtMin < $rt1, lipid.getCarbonCount() == $carbonCount1, lipid.getDoubleBondsCount() > $doubleBondCount, lipid.getLipidType().equals($lipid)]
then
    // in this case, the only change is the addition of the score, but the fact does not change so we do not break the principle of refractoriness
    $a1.addScore(1);
    $a2.addScore(1);
    // !! TODO ONLY FOR DEBUGGING
    System.out.println("Rule 2");
    //System.out.println("Scored 1 for annotations: " + $a1 + " and " + $a2);
end

rule "Score 1 for lipid pair with increasing RT and lipid type"
when
    $a1 : /annotations [$rt1 : rtMin, $carbonCount1 : lipid.getCarbonCount(), $doubleBondCount : lipid.getDoubleBondsCount(), $lipid : lipid.getLipidType()]
    $a2 : /annotations [this!= $a1, rtMin < $rt1, lipid.getCarbonCount() == $carbonCount1, lipid.getDoubleBondsCount() == $doubleBondCount, LipidPriority.isHigherPriority(lipid.getLipidType(), $lipid)]
then
    // in this case, the only change is the addition of the score, but the fact does not change so we do not break the principle of refractoriness
    $a1.addScore(1);
    $a2.addScore(1);
    // !! TODO ONLY FOR DEBUGGING
    System.out.println("Rule 3");
    //System.out.println("Scored 1 for annotations: " + $a1 + " and " + $a2);
end

rule "Score negative for lipid pair with increasing RT and carbon count"
when
    $a1 : /annotations [$rt1 : rtMin, $carbonCount1 : lipid.getCarbonCount(), $doubleBondCount : lipid.getDoubleBondsCount(), $lipid : lipid.getLipidType()]
    $a2 : /annotations [this!= $a1, rtMin > $rt1, lipid.getCarbonCount() < $carbonCount1, lipid.getDoubleBondsCount() == $doubleBondCount, lipid.getLipidType().equals($lipid)]
then
    // in this case, the only change is the addition of the score, but the fact does not change so we do not break the principle of refractoriness
    System.out.println($a1.getScore());
    $a1.addScore(-1);
    $a2.addScore(-1);
    System.out.println($a1.getScore());
    // !! TODO ONLY FOR DEBUGGING
    System.out.println("Rule 4");
    //System.out.println("Scored 1 for annotations: " + $a1 + " and " + $a2);
end

rule "Score negative for lipid pair with increasing RT and double bonds"
when
    $a1 : /annotations [$rt1 : rtMin, $carbonCount1 : lipid.getCarbonCount(), $doubleBondCount : lipid.getDoubleBondsCount(), $lipid : lipid.getLipidType()]
    $a2 : /annotations [this!= $a1, rtMin > $rt1, lipid.getCarbonCount() == $carbonCount1, lipid.getDoubleBondsCount() > $doubleBondCount, lipid.getLipidType().equals($lipid)]
then
    // in this case, the only change is the addition of the score, but the fact does not change so we do not break the principle of refractoriness
    $a1.addScore(-1);
    $a2.addScore(-1);
    // !! TODO ONLY FOR DEBUGGING
    System.out.println("Rule 5");
    //System.out.println("Scored 1 for annotations: " + $a1 + " and " + $a2);
end

rule "Score negative for lipid pair with increasing RT and lipid type"
when
    $a1 : /annotations [$rt1 : rtMin, $carbonCount1 : lipid.getCarbonCount(), $doubleBondCount : lipid.getDoubleBondsCount(), $lipid : lipid.getLipidType()]
    $a2 : /annotations [this!= $a1, rtMin > $rt1, lipid.getCarbonCount() == $carbonCount1, lipid.getDoubleBondsCount() == $doubleBondCount, LipidPriority.isHigherPriority(lipid.getLipidType(), $lipid)]
then
    // in this case, the only change is the addition of the score, but the fact does not change so we do not break the principle of refractoriness
    $a1.addScore(-1);
    $a2.addScore(-1);
    // !! TODO ONLY FOR DEBUGGING
    System.out.println("Rule 6");
    //System.out.println("Scored 1 for annotations: " + $a1 + " and " + $a2);
end

